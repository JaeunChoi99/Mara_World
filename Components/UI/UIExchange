--@ BeginProperty
--@ SyncDirection=None
Entity itemUI = "nil"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
Entity scrollView = "nil"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
string exBtnPath = ""/ui/DefaultGroup/RPGButtons/btn_exchange""
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
SyncTable<string,Entity> SlotItems = "string|Entity"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
Entity ExchangeUI = "nil"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
table SlotList = "{}"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
Entity MesoUI = "nil"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
table CraftSlots = "{}"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
Entity ResultSlot = "nil"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
Entity ResultPanel = "nil"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
Entity CraftButton = "nil"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
table slotMapping = "{}"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
table slotPaths = "{"Slot_Meat", "Slot_BokChoy", "Slot_Cabbage", "Slot_MungBeanSprout", "Slot_Tofu", "Slot_Mushroom"}"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
boolean isInitialized = "false"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
string slotNames = """"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
boolean isCraftButtonConnected = "false"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
Entity UIExchangeScriptHolder = "nil"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
boolean isEventConnected = "false"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
table ServerSlots = "{}"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
boolean isCraftRequested = "false"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=None
SyncTable<string,integer> serverSlotData = "string|integer"
--@ EndProperty

--@ BeginMethod
--@ MethodExecSpace=ClientOnly
void OnBeginPlay()
{
-- add UI Preset/Buttons
    local inventoryButton = _EntityService:GetEntityByPath(self.exBtnPath)
	self.ExchangeUI = _EntityService:GetEntityByPath("/ui/DefaultGroup/ExchangeUI")

    if inventoryButton ~= nil then
    	local openFunc = function()
    		self.ExchangeUI.Enable = true
    	end
    	if inventoryButton.ButtonComponent == nil then
    		inventoryButton:AddComponent("MOD.Core.ButtonComponent")
    	end
    	inventoryButton:ConnectEvent(ButtonClickEvent, openFunc)
    end 



log("[UIExchange] 클라이언트에서 CraftSlots 초기화")
    -- CraftSlots 초기화 (클라이언트 전용으로 변경)
    self.CraftSlots = {
        ["Ingredient_Meat"] = _EntityService:GetEntityByPath("/ui/DefaultGroup/ExchangeUI/CraftPanel/Craft_ScrollView/Slot_Meat"),
        ["Ingredient_BokChoy"] = _EntityService:GetEntityByPath("/ui/DefaultGroup/ExchangeUI/CraftPanel/Craft_ScrollView/Slot_BokChoy"),
        ["Ingredient_Cabbage"] = _EntityService:GetEntityByPath("/ui/DefaultGroup/ExchangeUI/CraftPanel/Craft_ScrollView/Slot_Cabbage"),
        ["Ingredient_MungBeanSprout"] = _EntityService:GetEntityByPath("/ui/DefaultGroup/ExchangeUI/CraftPanel/Craft_ScrollView/Slot_MungBeanSprout"),
        ["Ingredient_Tofu"] = _EntityService:GetEntityByPath("/ui/DefaultGroup/ExchangeUI/CraftPanel/Craft_ScrollView/Slot_Tofu"),
        ["Ingredient_Mushroom"] = _EntityService:GetEntityByPath("/ui/DefaultGroup/ExchangeUI/CraftPanel/Craft_ScrollView/Slot_Mushroom"),
    }


log("[UIExchange] OnBeginPlay 호출됨.")  -- OnBeginPlay 호출 확인 로그

    -- CraftButton 초기화
    self.CraftButton = _EntityService:GetEntityByPath("/ui/DefaultGroup/ExchangeUI/CraftPanel/CraftButton")
    
    if self.CraftButton then
        log("[UIExchange] CraftButton 객체를 찾았습니다.")  -- CraftButton 찾았다는 로그

        -- 버튼 컴포넌트 확인 및 추가
        if self.CraftButton.ButtonComponent == nil then
            log("[UIExchange] CraftButton에 ButtonComponent 추가 중.")
            self.CraftButton:AddComponent("MOD.Core.ButtonComponent")
        end

        -- UIExchangeScriptHolder 엔티티 참조
        self.UIExchangeScriptHolder = _EntityService:GetEntityByPath("/ui/DefaultGroup/ExchangeUI/ExchangeScriptHolder")
        if self.UIExchangeScriptHolder then
            log("[UIExchange] UIExchangeScriptHolder를 참조했습니다.")  -- UIExchangeScriptHolder 찾았다는 로그

            -- 클릭 이벤트 연결, 중복 연결 방지
            if not self.isEventConnected then
                self.CraftButton:ConnectEvent(ButtonClickEvent, function()
                    log("[UIExchange] CraftButton 클릭됨 - 제작 요청 설정")  -- 클릭 로그
                    self.isCraftRequested = true
                end)
                self.isEventConnected = true
            end
        else
            log_error("[UIExchange] UIExchangeScriptHolder를 찾을 수 없습니다. 경로를 확인하세요.")
        end
    else
        log_error("[UIExchange] CraftButton을 찾지 못했습니다. 경로를 다시 확인해주세요.")
    end
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=All
void ClearSlot(string slotName)
{
local slot = self.slotMapping[slotName]
    if slot and slot.UICraftItemSlot then
        slot.UICraftItemSlot:Clear()
    end
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=ClientOnly
void SetSlotByName(string slotName,string itemId,integer itemCount)
{
 local slot = self.slotMapping[slotName]
    if not slot then
        log_error("[UIExchange] SetSlotByName: 슬롯을 찾지 못했습니다. slotName: " .. slotName)
        return
    end

    if slot.UICraftItemSlot then
        slot.UICraftItemSlot:SetData(itemId, itemCount)
        log("[UIExchange] SetSlotByName: 슬롯 " .. slotName .. "에 아이템 설정 완료 - itemId: " .. itemId .. ", itemCount: " .. tostring(itemCount))
        self.serverSlotData[slotName] = itemCount
    else
        log_error("[UIExchange] SetSlotByName: UICraftItemSlot이 nil입니다. slotName: " .. slotName)
    end
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=All
void OnUpdate(number delta)
{
      if self.isCraftRequested then
        log("[UIExchange] 제작 요청 감지됨. 중간 스크립트를 통해 제작 시도 중.")
        self.isCraftRequested = false

        -- slotData를 CraftSlots에서 생성
        local slotData = {}
        for itemId, slotEntity in pairs(self.CraftSlots) do
            slotData[itemId] = slotEntity.UICraftItemSlot.ItemCount or 0
        end


        -- Shop의 CraftMaratang 호출, slotData 인자로 전달
        _Shop:CraftMaratang(slotData)
    end


    if _ControllerScript.isClearRequested then
        self:ClearCraftSlots()
        _ControllerScript:ResetClearFlag()  -- 슬롯 초기화 후 플래그 리셋
    end
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=All
boolean CheckRecipe_Server()
{
    log("[UIExchange] CheckRecipe_Server 호출됨")  -- 호출 로그

    local requiredItems = {
        {"Ingredient_Meat", 10},
        {"Ingredient_BokChoy", 10},
        {"Ingredient_Cabbage", 10},
        {"Ingredient_MungBeanSprout", 10},
        {"Ingredient_Tofu", 10},
        {"Ingredient_Mushroom", 10}
    }

    -- 모든 재료가 충족되는지 확인
    for _, required in ipairs(requiredItems) do
        local itemIdRequired = required[1]
        local itemCountRequired = required[2]
        local slot = self.ServerSlots[itemIdRequired]

        if not slot or slot.ItemId ~= itemIdRequired or slot.ItemCount < itemCountRequired then
            log_error("[UIExchange] CheckRecipe_Server: 재료가 부족합니다. 필요 아이템: " .. itemIdRequired)
            return false
        end
    end

    log("[UIExchange] 모든 재료가 충족되었습니다.")
    return true
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=ClientOnly
void OnCraftButtonClick()
{
log("[UIExchange] CraftButton 클릭됨 - 제작 요청 설정")
    self.isCraftRequested = true
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=ClientOnly
void SendCraftRequestToServer()
{
 local slotData = {}
    for itemId, slotEntity in pairs(self.CraftSlots) do
        slotData[itemId] = slotEntity.UICraftItemSlot.ItemCount or 0
    end

    -- 서버에 제작 요청과 slotData 전달
    self:SendEventToServer("CraftMaratangRequest", slotData)
    log("[UIExchange] 서버로 제작 요청 전송: ", slotData)
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=ClientOnly
void OnCraftDone(OnCraftDone event)
{

}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=All
void ClearCraftSlots()
{
for itemId, slot in pairs(self.CraftSlots) do
        if slot and slot.UICraftItemSlot then
            slot.UICraftItemSlot:Clear()
            log("[UIExchange] (ClearCraftSlots) 슬롯 비움: " .. itemId)
        else
            log_error("[UIExchange] (ClearCraftSlots) 슬롯을 찾지 못했습니다: " .. itemId)
        end
    end
}
--@ EndMethod

--@ BeginEntityEventHandler
--@ Scope=All
--@ Target=entity:1d0f55d4-6acd-4974-91f7-ed6d7e4c0181
--@ EventName=SimpleInventoryInitializedEvent
HandleSimpleInventoryInitializedEvent
{
  local SlotName = event.SlotName
    local ItemId = event.ItemId
    local ItemCount = event.ItemCount

    if not self.isInitialized then
        log_error("[UIExchange] HandleSimpleInventoryInitializedEvent: 슬롯 매핑이 아직 초기화되지 않았습니다.")
        return
    end

    if SlotName then
        log("[UIExchange] HandleSimpleInventoryInitializedEvent: SlotName = " .. SlotName)
        if self.slotMapping[SlotName] then
            if ItemCount > 0 then
                self:SetSlotByName(SlotName, ItemId, ItemCount)
            else
                self:ClearSlot(SlotName)
            end
        else
            log_error("[UIExchange] HandleSimpleInventoryInitializedEvent: slotMapping에 SlotName " .. tostring(SlotName) .. "가 존재하지 않습니다.")
        end
    else
        log_error("[UIExchange] HandleSimpleInventoryInitializedEvent: 슬롯 이름이 nil입니다.")
    end
}
--@ EndEntityEventHandler

--@ BeginEntityEventHandler
--@ Scope=All
--@ Target=localPlayer
--@ EventName=SimpleInventoryItemAddedEvent
HandleSimpleInventoryItemAddedEvent
{
  -- Parameters
    local SlotName = event.SlotName  -- 슬롯 이름으로 참조
    local ItemId = event.ItemId
    local ItemCount = event.ItemCount
    ---------------------------------------------------------

    if self.slotMapping[SlotName] then
        self:SetSlotByName(SlotName, ItemId, ItemCount)
    end
}
--@ EndEntityEventHandler

--@ BeginEntityEventHandler
--@ Scope=All
--@ Target=entity:1d0f55d4-6acd-4974-91f7-ed6d7e4c0181
--@ EventName=SimpleInventoryItemModifiedEvent
HandleSimpleInventoryItemModifiedEvent
{
    -- Parameters
    local SlotIndex = event.SlotIndex
    local ItemId = event.ItemId
    local ItemCount = event.ItemCount
    ---------------------------------------------------------

    if not self.isInitialized then
        log_error("[UIExchange] HandleSimpleInventoryItemModifiedEvent: 슬롯 매핑이 아직 초기화되지 않았습니다. 이벤트를 무시합니다.")
        return
    end

    -- 슬롯 인덱스가 유효한지 확인 (슬롯 개수는 self.slotNames에 정의된 개수로 제한)
    if SlotIndex < 1 or SlotIndex > #self.slotNames then
        log_error("[UIExchange] HandleSimpleInventoryItemModifiedEvent: SlotIndex가 범위를 벗어났습니다. SlotIndex: " .. tostring(SlotIndex))
        return
    end

    -- SlotName을 슬롯 인덱스 기반으로 가져오기
    local SlotName = self.slotNames[SlotIndex]

    if not SlotName then
        log_error("[UIExchange] HandleSimpleInventoryItemModifiedEvent: 유효하지 않은 SlotName입니다. SlotIndex: " .. tostring(SlotIndex))
        return
    end

    log("[UIExchange] HandleSimpleInventoryItemModifiedEvent: 전달된 SlotName = " .. SlotName)

    -- 슬롯 매핑 상태 확인 및 처리
    if self.slotMapping[SlotName] then
        local slot = self.slotMapping[SlotName]
        if ItemCount > 0 then
            -- 이미 동일한 아이템이 설정된 경우 업데이트 방지
            if slot.UICraftItemSlot and slot.UICraftItemSlot.ItemId == ItemId and slot.UICraftItemSlot.ItemCount == ItemCount then
                log("[UIExchange] HandleSimpleInventoryItemModifiedEvent: 슬롯 " .. SlotName .. "에 이미 동일한 아이템이 설정되어 있음. 중복 설정 방지.")
                return
            end
            self:SetSlotByName(SlotName, ItemId, ItemCount)
        else
            self:ClearSlot(SlotName)
        end
    else
        log_error("[UIExchange] HandleSimpleInventoryItemModifiedEvent: slotMapping에 SlotName " .. SlotName .. "가 존재하지 않습니다.")
    end

}
--@ EndEntityEventHandler

--@ BeginEntityEventHandler
--@ Scope=All
--@ Target=localPlayer
--@ EventName=SimpleInventoryMesoModifiedEvent
HandleSimpleInventoryMesoModifiedEvent
{
-- Parameters
    local Meso = event.Meso
    ---------------------------------------------------------

    self:SetMeso(Meso)
}
--@ EndEntityEventHandler

--@ BeginEntityEventHandler
--@ Scope=All
--@ Target=localPlayer
--@ EventName=SimpleInventoryItemRemovedEvent
HandleSimpleInventoryItemRemovedEvent
{
-- Parameters
    local SlotName = event.SlotName  -- 슬롯 이름으로 참조
    local ItemId = event.ItemId
    ---------------------------------------------------------

    self:ClearSlot(SlotName)

}
--@ EndEntityEventHandler

--@ BeginEntityEventHandler
--@ Scope=All
--@ Target=localPlayer
--@ EventName=ButtonClickEvent
HandleButtonClickEvent
{
if self.CraftButton then
    self.CraftButton:ConnectEvent(ButtonClickEvent, function()
        log("[UIExchange] CraftButton 클릭됨.")  -- 클릭 로그
        self:TryCraftMaratang_Server()
    end)
else
    log_error("[UIExchange] CraftButton을 찾지 못했습니다. 새 경로를 확인해주세요.")
end
}
--@ EndEntityEventHandler

--@ BeginEntityEventHandler
--@ Scope=All
--@ Target=self
--@ EventName=TryCraftMaratangRequest
HandleTryCraftMaratangRequest
{
  log("[UIExchange] 서버에서 제작 요청 확인됨.")

    -- 서버에서 `TryCraftMaratang_Server` 메서드를 호출하여 제작 시도
    self:TryCraftMaratang_Server()
}
--@ EndEntityEventHandler
