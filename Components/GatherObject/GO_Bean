--@ BeginProperty
--@ SyncDirection=All
integer GatherCount = "0"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=All
integer MaxGatherLimit = "3000"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=All
integer LastGatherTime = "0"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=All
Component PlayerComponent = ":PlayerComponent"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=All
Entity GatherLimitUI = "nil"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=All
boolean Triggered = "false"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=All
number Timer = "0"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=All
boolean IsTimerActive = "false"
--@ EndProperty

--@ BeginProperty
--@ SyncDirection=All
integer DailyTofuCount = "0"
--@ EndProperty

--@ BeginMethod
--@ MethodExecSpace=ServerOnly
void OnBeginPlay()
{
     
-- 데이터 스토리지 가져오기
    local userDataStorage = _DataStorageService:GetUserDataStorage("GatheringData")
    if userDataStorage == nil then
        print("[ERROR] 데이터 스토리지를 가져올 수 없습니다.")
        return
    end

    -- 데이터 불러오기 시도
    local errorCode, loadData = userDataStorage:GetAndWait("GatheringData")
    
    -- 데이터 불러오기 실패 시 에러 처리
    if errorCode ~= 0 then
        print("[ERROR] 데이터 로딩 실패: " .. tostring(errorCode))
        return
    end

    -- 불러온 데이터가 nil인지 확인
    if loadData == nil then
        print("[INFO] 저장된 데이터가 없습니다. 새로운 데이터를 생성합니다.")
        self.GatherCount = 0
        self.LastGatherTime = os.time()
		self.DailyTofuCount = 0
    else
        -- JSON 디코딩 및 데이터 적용
        local gatherData = _HttpService:JSONDecode(loadData)
        self.GatherCount = gatherData.GatherCount or 0
        self.LastGatherTime = gatherData.LastGatherTime or os.time()
		self.DailyTofuCount = gatherData.DailyTofuCount or 0

    end
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=ServerOnly
boolean CheckGatherLimit()
{
-- 하루(86400초) 경과 여부 확인
    local currentTime = os.time()
    if currentTime - self.LastGatherTime >= 86400 then
        -- 하루가 지났으므로 GatherCount 초기화
        self.GatherCount = 0
        self.LastGatherTime = currentTime
		self.DailyTofuCount = 0
        print("[INFO] 하루가 지나 채집 횟수를 초기화합니다.")
    end

    -- 현재 채집 횟수가 최대치를 넘었는지 확인
    if self.GatherCount >= self.MaxGatherLimit then
        print("[ERROR] 하루 최대 채집 횟수를 초과했습니다.")

        

        return false  -- 채집 불가
    else
        return true  -- 채집 가능
    end
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=ServerOnly
void OnEndPlay()
{
      -- 데이터 스토리지 가져오기
    local userDataStorage = _DataStorageService:GetUserDataStorage("GatheringData")
    if userDataStorage == nil then
        print("[ERROR] 데이터 스토리지를 가져올 수 없습니다.")
        return
    end

    -- 저장할 데이터 생성
    local gatherData = {
        GatherCount = self.GatherCount,
        LastGatherTime = self.LastGatherTime,
		DailyTofuCount = self.DailyTofuCount

    }

    -- 데이터 저장 시도
    local jsonData = _HttpService:JSONEncode(gatherData)
    userDataStorage:SetAsync("GatheringData", jsonData, function()
        print("[INFO] 채집 데이터 저장 완료")
    end)

}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=ClientOnly
void OnUpdate(number delta)
{
if self.Triggered == true then
self:GatherLimitUISet()
else
	self:EndGatherLimitUISet()
end
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=All
void GatherLimitUISet()
{
self.GatherLimitUI = _EntityService : GetEntityByPath("/ui/DefaultGroup/GatherLimitUI") 

if self.GatherCount >= self.MaxGatherLimit then
	self.GatherLimitUI:SetEnable(true)
	log("아쫌")
else
	self.GatherLimitUI:SetEnable(false)
	end
}
--@ EndMethod

--@ BeginMethod
--@ MethodExecSpace=All
void EndGatherLimitUISet()
{
self.GatherLimitUI = _EntityService : GetEntityByPath("/ui/DefaultGroup/GatherLimitUI")
self.GatherLimitUI:SetEnable(false)
}
--@ EndMethod

--@ BeginEntityEventHandler
--@ Scope=All
--@ Target=self
--@ EventName=TriggerEnterEvent
HandleTriggerEnterEvent
{
    -- 일정 시간 후 채집 가능하도록 타이머 설정
    _TimerService:SetTimerOnce(function()
        self.Triggered = true

        -- Parameters
        local TriggerBodyEntity = event.TriggerBodyEntity
        ---------------------------------------------------------

        -- 채집 제한 확인
        if not self:CheckGatherLimit() then
            print("[ERROR] 채집 제한에 도달하여 더 이상 채집할 수 없습니다.")
            return
        end

        -- 채집 횟수 증가
        self.GatherCount = self.GatherCount + 1
        print("[INFO] 현재 채집 횟수: " .. tostring(self.GatherCount))

        -- 인벤토리 확인
        local inventory = TriggerBodyEntity.InventoryComponent
        if inventory == nil then 
            print("[ERROR] 충돌한 엔티티에 인벤토리가 없습니다.")
            return 
        else
            print("[INFO] 인벤토리 확인됨")
        end

        -- SimpleInventory 컴포넌트 확인
        local SimpleInventory = TriggerBodyEntity.SimpleInventory
        if SimpleInventory == nil then
            print("[ERROR] 충돌한 엔티티에 SimpleInventory 컴포넌트가 없습니다.")
            return
        else
            print("[INFO] SimpleInventory 확인됨")
        end

        -- 버섯 아이템 정보
        local itemNames = {
            {"Tofu", "Ingredient_Tofu"},
            {"Tofu", "Ingredient_Tofu"},
            {"Tofu", "Ingredient_Tofu"}
        }

        -- 아이템 랜덤 선택
        math.randomseed(os.time())
        local index = math.random(1, 3)
        local getItemName = itemNames[index]

        -- 선택된 아이템을 인벤토리에 추가
        print("[INFO] 아이템을 인벤토리에 추가 중: " .. tostring(getItemName[1]))
        local remain = SimpleInventory:AddItem(getItemName[2], 1)

        -- 채집한 아이템의 개수 갱신
        if tostring(getItemName[1]) == "Tofu" then
            self.DailyTofuCount = self.DailyTofuCount + 1
        end

        -- 아이템 정상 추가 확인
        if remain > 0 then
            print("[ERROR] 인벤토리에 아이템을 모두 추가하지 못했습니다.")
        else
            print("[INFO] 인벤토리에 아이템이 정상적으로 추가되었습니다.")
        end

        -- GatheringEffect2 이펙트 활성화
        local gatheringEffect2 = _EntityService:GetEntityByPath("/maps/GatheringMap/GatheringEffect2")
        if gatheringEffect2 then
            gatheringEffect2:SetEnable(true)
            _TimerService:SetTimerOnce(function()
                gatheringEffect2:SetEnable(false)
                self.Entity:SetEnable(false)

                -- 일정 시간 후에 채집 오브젝트를 재활성화
                _TimerService:SetTimerOnce(function()
                    self.Entity:SetEnable(true)
                end, 2) -- 2초 후 재활성화
            end, 0.5) -- 0.5초 후 GatheringEffect2 비활성화
        else
            print("[ERROR] GatheringEffect2 오브젝트를 찾을 수 없습니다.")
        end

        -- IngredientEffect2를 통해 아이템 아이콘 표시
        local itemIcons = {
            ["Ingredient_Tofu"] = "1cba22e2e8d04296b457a36752b3903f" -- 버섯 아이콘
        }
        local itemIconRUID = itemIcons[getItemName[2]]
        if itemIconRUID then
            local ingredientEffect2 = _EntityService:GetEntityByPath("/maps/GatheringMap/IngredientEffect2")
            if ingredientEffect2 then
                ingredientEffect2.SpriteParticleComponent.SpriteRUID = itemIconRUID
                ingredientEffect2:SetEnable(true)
                
                -- 일정 시간 후 IngredientEffect2 비활성화
                _TimerService:SetTimerOnce(function()
                    ingredientEffect2:SetEnable(false)
                end, 1.5) -- 1.5초 후 IngredientEffect2 비활성화
            else
                print("[ERROR] IngredientEffect2 오브젝트를 찾을 수 없습니다.")
            end
        else
            print("[ERROR] 아이템에 맞는 RUID가 설정되지 않았습니다: " .. tostring(getItemName[2]))
        end
    end, 0.5) -- 2초 대기 후 채집 가능
}
--@ EndEntityEventHandler

--@ BeginEntityEventHandler
--@ Scope=All
--@ Target=self
--@ EventName=TriggerLeaveEvent
HandleTriggerLeaveEvent
{
--------------- Native Event Sender Info ----------------
-- Sender: TriggerComponent
-- Space: Server, Client
---------------------------------------------------------

-- Parameters
-- local TriggerBodyEntity = event.TriggerBodyEntity
---------------------------------------------------------
self.Triggered = false
}
--@ EndEntityEventHandler
